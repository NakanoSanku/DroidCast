#
# The simple script to take a screenshot by the built-in ADB command directly (‘ adb screencap -p ’)
# required : Python 3.10+, adb tool
#
# usage :
# - use `python screencap_server.py` to start server
# - open browser http://localhost:12347/screenshot to view the screenshot
#
import argparse
import subprocess
from http.server import ThreadingHTTPServer, BaseHTTPRequestHandler
from urllib import parse

adb = ['adb']

parser = argparse.ArgumentParser(
    description='A simple script used to capture screenshot for Android devices')
parser.add_argument('-s', '--serial', dest='device_serial',
                    help='Device serial number (adb -s option)')
parser.add_argument(
    '-p',
    '--port',
    dest='port',
    nargs='?',
    const=12347,
    type=int,
    default=12347,
    help='Port number to be connected, by default it\'s 12347')
args_in = parser.parse_args()


def run_adb(args, pipeOutput=True):
    if (args_in.device_serial):
        args = adb + ['-s', args_in.device_serial] + args
    else:
        args = adb + args

    out = None
    if (pipeOutput):
        out = subprocess.PIPE

    return subprocess.Popen([str(arg) for arg in args], stdout=out)


class ScreenCapHandler(BaseHTTPRequestHandler):
    def capture_by_adb(self, out):
        """ capture the screenshot via adb tool """
        process = run_adb(["shell", "screencap", "-p"])
        screenshot_raw = process.stdout.read()
        out.write(screenshot_raw)
        print("screenshot generated by adb cmd")

    def do_GET(self):
        print("client addr : ", self.client_address)
        parsed = parse.urlparse(self.path)
        # print("parsed path : ", parsed.path)
        if parsed.path == '/screenshot':
            self.send_response(200)
            self.send_header("Content-Type", "image/jpeg")
            self.end_headers()

            self.capture_by_adb(self.wfile)
        else:
            self.send_response(500)
            self.send_header("Content-Type", "text/html")
            self.end_headers()

            self.wfile.write(str.encode('<h1>Unsupported request</h1>'))


def identify_device():
    proc = subprocess.Popen(['adb', "devices"], stdout=subprocess.PIPE)
    if proc.returncode:
        raise RuntimeError("Fail to find devices")
    else:
        # Output as following:
        # List of devices attached
        # 6466eb0c	device
        device_serial_no = args_in.device_serial

        devices_info = str(proc.stdout.read())
        print("device info : ", devices_info)
        device_cnt = devices_info.count('device') - 1

        if device_cnt < 1:
            raise RuntimeError("Fail to find devices")

        if device_cnt > 1 and (not device_serial_no):
            raise RuntimeError(
                "Please specify the serial number of target device you want to use ('-s serial_number').")


if __name__ == "__main__":
    try:
        identify_device()

        http_svr = ThreadingHTTPServer(
            ("0.0.0.0", args_in.port), ScreenCapHandler)
        print("Server Port : ", str(http_svr.server_port))
        http_svr.serve_forever()
    except Exception as e:
        print(e)
